/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// @generated by `buck2 run //arvr/projects/mixedreality/libraries/mrutilitykit:build_and_deploy unity`

using System.Runtime.InteropServices;
using UnityEngine;

namespace Meta.XR.MRUtilityKit
{
    internal static unsafe class MRUKNativeFuncs
    {
        public enum MrukResult
        {
            Success = 0,
            ErrorInvalidArgs = 1,
        };

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukPolygon2f
        {
            public Vector2[] points;
            public uint numPoints;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukMesh2f
        {
            public Vector2* vertices;
            public uint numVertices;
            public uint* indices;
            public uint numIndices;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukMesh3f
        {
            public Vector3* vertices;
            public uint numVertices;
            public uint* indices;
            public uint numIndices;
        }


        /**
         * Add two vectors together. This is implemented as a test to ensure the native shared
         * library is working correctly.
         *
         * @param[in] a The first vector.
         * @param[in] b The second vector.
         * @return The sum of the two vectors.
         */
        internal delegate Vector3 AddVectorsDelegate(Vector3 a, Vector3 b);

        /**
         * Triangulate a polygon with holes, any winding order works. The first polyline defines the main
         * polygon. Following polylines define holes. This function will allocate memory for the vertices
         * and indices. You *MUST* call FreeMesh() when you are done with it or you will leak memory.
         *
         * @param[in] polygons The polygon to triangulate.
         * @param[in] numPolygons The number of polygons in the array.
         * @return mesh The triangulated mesh.
         */
        internal delegate MrukMesh2f TriangulatePolygonDelegate(MrukPolygon2f[] polygons, uint numPolygons);

        /**
         * Free the memory allocated by TriangulatePolygon.
         *
         * @param[in] mesh The mesh to free.
         */
        internal delegate void FreeMeshDelegate(ref MrukMesh2f mesh);

        /**
         * Compute the mesh segmentation for a given set of vertices, indices and segmentation points.
         * You *MUST* call FreeMeshSegmentation() on the meshSegments array when you are done with it or you
         * will leak memory.
         *
         * @param[in] vertices The mesh vertices.
         * @param[in] numVertices The number of vertices in the mesh.
         * @param[in] indices The mesh indices.
         * @param[in] numIndices The number of indices in the mesh.
         * @param[in] segmentationPoints The points that should be used to calculate the segments.
         * @param[in] numSegmentationPoints The number of segmentation points.
         * @param[in] reservedMin The minimum bounding box for the reserved segment.
         * @param[in] reservedMax The maximum bounding box for the reserved segment.
         * @param[out] meshSegments The resulting segments.
         * @param[out] numSegments The number of segments in the resulting array.
         * @param[out] reservedSegment The segment that is inside the reserved bounding box.
         */
        internal delegate MrukResult ComputeMeshSegmentationDelegate(Vector3[] vertices, uint numVertices, uint[] indices, uint numIndices, Vector3[] segmentationPoints, uint numSegmentationPoints, Vector3 reservedMin, Vector3 reservedMax, out MrukMesh3f* meshSegments, out uint numSegments, out MrukMesh3f reservedSegment);

        /**
         * Free the memory allocated by ComputeMeshSegmentation.
         *
         * @param[in] meshSegments The array of segments to free.
         * @param[in] numSegments The number of segments in the array.
         * @param[in] reservedSegment The reserved segment to free.
         */
        internal delegate void FreeMeshSegmentationDelegate(MrukMesh3f* meshSegments, uint numSegments, ref MrukMesh3f reservedSegment);

        internal static AddVectorsDelegate AddVectors;
        internal static TriangulatePolygonDelegate TriangulatePolygon;
        internal static FreeMeshDelegate FreeMesh;
        internal static ComputeMeshSegmentationDelegate ComputeMeshSegmentation;
        internal static FreeMeshSegmentationDelegate FreeMeshSegmentation;

        internal static void LoadNativeFunctions()
        {
            AddVectors = MRUKNative.LoadFunction<AddVectorsDelegate>("AddVectors");
            TriangulatePolygon = MRUKNative.LoadFunction<TriangulatePolygonDelegate>("TriangulatePolygon");
            FreeMesh = MRUKNative.LoadFunction<FreeMeshDelegate>("FreeMesh");
            ComputeMeshSegmentation = MRUKNative.LoadFunction<ComputeMeshSegmentationDelegate>("ComputeMeshSegmentation");
            FreeMeshSegmentation = MRUKNative.LoadFunction<FreeMeshSegmentationDelegate>("FreeMeshSegmentation");
        }

        internal static void UnloadNativeFunctions()
        {
            AddVectors = null;
            TriangulatePolygon = null;
            FreeMesh = null;
            ComputeMeshSegmentation = null;
            FreeMeshSegmentation = null;
        }

    }
}
